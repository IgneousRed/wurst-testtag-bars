package TexttagCore
import Texttag
import NoWurst
import Unit
import ErrorHandling
import Force
import Player
import TimerUtils
import Basics

constant LIFESPAN_MAX = REAL_MAX / 2 // Not sure if /2 is necessary but the number is big regardless
constant LIFESPAN_DIVIDED = LIFESPAN_MAX / 255

var upperBound = -1
texttag array textTagArray
unit array unitArray
vec3 array vec3Array
TexttagCore array barArray

function fadeOutCallback()
	destroy GetExpiredTimer().getData() castTo TexttagCore
	GetExpiredTimer().release()

function lockCallback()
	for i = 0 to upperBound
		textTagArray[i].setPos(unitArray[i].getPos3Real() + vec3Array[i])

/** TexttagCore wraps texttag and gives Alpha, Lock and other functionalities
	let c = new TexttagCore(alpha)
		..setText("Magic", size)
		..setColor(col
		..fadeOut(fadeTime, velocity)
		..setVisibility(playerGroup)
		..lock(u, offset)
*/
public class TexttagCore
	private var fadeTime = -1.0
	private real fadeTime255
	private int alpha
	private var lockIndex = -1
	private let textTag = CreateTextTag()

	construct(int alpha)
		if textTag == null
			error("Texttag limit reached!")
		else
			alpha(alpha)
			textTag.setPermanent(false)

	ondestroy
		textTag.destr()
		if isLocked()
			arrayRemove()

	/** Sets texttag text */
	function setText(string text, real size)
		textTag.setText(text, size)

	/** Sets texttag color */
	function setColor(color col)
		textTag.setColor(col.withAlpha(0))

	/** Sets texttag alpha */
	function setAlpha(int alpha)
		if not isFading()
			alpha(alpha)
		else
			textTag.setFadepoint(fadeTime - fadeTime255 / alpha)

	/** Fadeout text over time with velocity. Only call once as it destroys the class */
	function fadeOut(real time, vec2 velocity)
		fadeOut(time)
		textTag.setVelocity(velocity.x, velocity.y)

	/** Fadeout text over time. Only call once as it destroys the class */
	function fadeOut(real time)
		if not isFading()
			getTimer()..setData(this castTo int)
				..start(time, function fadeOutCallback)
			fadeTime = time
			fadeTime255 = time * 255
			textTag..setAge(0)
				..setLifespan(time)
				..setFadepoint(time - fadeTime255 / alpha)
		else
			error("Texttag is already fading")

	/** Is text fading */
	function isFading() returns bool
		return fadeTime != -1

	/** Sets visibility based on playerGroup */
	function setVisibility(force playerGroup)
		textTag.setVisibility(playerGroup.containsPlayer(localPlayer))

	/** Locks text to unit with offset */
	function lock(unit u, vec3 offset)
		if not isLocked()
			upperBound++
			lockIndex = upperBound
			textTagArray[lockIndex] = textTag
			unitArray[lockIndex] = u
			vec3Array[lockIndex] = offset
			barArray[lockIndex] = this
		else
			error("Texttag is already locked")

	/** Unlocks text from the unit */
	function unlock()
		if isLocked()
			arrayRemove()
			lockIndex = -1
		else
			error("Texttag is not locked")

	/** Is text locked to a unit */
	function isLocked() returns bool
		return lockIndex > -1

	/** Sets text position */
	function setPos(vec3 position)
		textTag.setPos(position)

	private function alpha(int value)
		if value > 1
			alpha = value
			let lifespan = value * LIFESPAN_DIVIDED
			textTag..setLifespan(lifespan)
				..setFadepoint(lifespan - LIFESPAN_MAX)
		else
			alpha = 1
			textTag..setLifespan(LIFESPAN_DIVIDED)
				..setFadepoint(LIFESPAN_DIVIDED - LIFESPAN_MAX)

	private function arrayRemove()
		textTagArray[lockIndex] = textTagArray[upperBound]
		unitArray[lockIndex] = unitArray[upperBound]
		vec3Array[lockIndex] = vec3Array[upperBound]
		barArray[lockIndex] = barArray[upperBound]
		barArray[lockIndex].lockIndex = lockIndex
		upperBound--

init
	CreateTimer().startPeriodic(ANIMATION_PERIOD, function lockCallback)
